<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Qu·∫£n tr·ªã h·ªá th·ªëng</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 2vh;
    }
            üìã Chi ti·∫øt ƒë√°nh gi√°
          </a>'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 2vh;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 3vh;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }

    h1 {
      text-align: center;
      color: white;
      font-size: 3.5vh;
      margin-bottom: 3vh;
      text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3vh;
      margin-bottom: 3vh;
    }

    .card {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 2.5vh;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .card h2 {
      color: white;
      font-size: 2.2vh;
      margin-bottom: 2vh;
      text-align: center;
    }

    .form-group {
      margin-bottom: 2vh;
    }

    .form-group label {
      display: block;
      color: white;
      font-weight: 600;
      margin-bottom: 0.5vh;
      font-size: 1.6vh;
    }

    select, input, button {
      width: 100%;
      padding: 1.5vh 2vh;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      font-size: 1.6vh;
      font-weight: 600;
    }

    select option {
      background: #333;
      color: white;
    }

    input::placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    button {
      background: linear-gradient(135deg, #00ff88, #00cc6a);
      color: #000;
      border: none;
      cursor: pointer;
      font-weight: 700;
      transition: all 0.3s ease;
      margin-top: 1vh;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
    }

    .btn-recall {
      background: linear-gradient(135deg, #ff9800, #f57c00);
      color: white;
    }

    .btn-recall:hover {
      box-shadow: 0 8px 25px rgba(255, 152, 0, 0.3);
    }

    .result-section {
      margin-top: 2vh;
      padding: 2vh;
      background: rgba(0, 255, 136, 0.1);
      border: 2px solid rgba(0, 255, 136, 0.3);
      border-radius: 10px;
      display: none;
    }

    .result-section.show {
      display: block;
    }

    .number-called {
      font-size: 2.5vh;
      font-weight: 700;
      color: #00ff88;
      text-align: center;
      margin-bottom: 1vh;
    }

    .customer-code {
      font-size: 3vh;
      font-weight: 700;
      color: white;
      text-align: center;
      font-family: monospace;
      letter-spacing: 2px;
      padding: 1vh;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      margin: 1vh 0;
    }

    .action-buttons {
      display: flex;
      gap: 1vh;
      margin-top: 1vh;
    }

    .action-buttons button {
      flex: 1;
      font-size: 1.4vh;
    }

    .reports-section {
      grid-column: 1 / -1;
    }

    .reports-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2vh;
    }

    .report-btn {
      background: linear-gradient(135deg, #2196f3, #1976d2);
      color: white;
      text-decoration: none;
      display: block;
      padding: 2vh;
      border-radius: 10px;
      text-align: center;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .report-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(33, 150, 243, 0.3);
    }

    .report-btn.purple {
      background: linear-gradient(135deg, #673ab7, #512da8);
    }

    .report-btn.purple:hover {
      box-shadow: 0 8px 25px rgba(103, 58, 183, 0.3);
    }

    .report-btn.green {
      background: linear-gradient(135deg, #4caf50, #388e3c);
    }

    .report-btn.green:hover {
      box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
    }

    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 0.5vh;
    }

    .status-online {
      background: #4caf50;
      box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
    }

    .status-offline {
      background: #f44336;
    }

    @media (max-width: 768px) {
      .grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üéõÔ∏è Qu·∫£n tr·ªã h·ªá th·ªëng x·∫øp h√†ng</h1>
    
    <div class="grid">
      <!-- G·ªçi s·ªë ti·∫øp theo -->
      <div class="card">
        <h2>üìû G·ªçi kh√°ch h√†ng</h2>
        
        <div class="form-group">
          <label for="service">Ch·ªçn qu·∫ßy d·ªãch v·ª•:</label>
          <select id="service">
            <option>Ch·ª©ng th·ª±c - H·ªô t·ªãch</option>
            <option>VƒÉn th∆∞</option>
            <option>N·ªôi v·ª• - GDƒêT - VƒÉn h√≥a - Khoa h·ªçc v√† Th√¥ng tin - Y t·∫ø - Lao ƒë·ªông - B·∫£o tr·ª£ X√£ h·ªôi</option>
            <option>N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng - T√†i ch√≠nh K·∫ø ho·∫°ch - X√¢y d·ª±ng v√† C√¥ng th∆∞∆°ng</option>
          </select>
        </div>

        <div class="form-group">
          <label for="adminPassword">M·∫≠t kh·∫©u qu·∫£n tr·ªã:</label>
          <input type="password" id="adminPassword" placeholder="Nh·∫≠p m·∫≠t kh·∫©u admin">
        </div>

        <button onclick="callNext()">üì¢ G·ªçi s·ªë ti·∫øp theo</button>
        <button onclick="recallLast()" class="btn-recall">üîÑ G·ªçi l·∫°i s·ªë v·ª´a g·ªçi</button>

        <div id="callResult" class="result-section">
          <div id="numberCalled" class="number-called"></div>
          <div id="customerCodeDisplay" class="customer-code"></div>
          <div class="action-buttons">
            <button onclick="copyCustomerCode()">üìã Copy m√£ KH</button>
            <button onclick="openRatingForm()">üìù ƒê√°nh gi√°</button>
            <button onclick="openCustomerLookup()">üîç Tra c·ª©u</button>
          </div>
        </div>
      </div>

      <!-- Th·ªëng k√™ real-time -->
      <div class="card">
        <h2>üìä Th·ªëng k√™ h·ªá th·ªëng</h2>
        
        <div id="systemStats">
          <p style="color: white; text-align: center; margin: 2vh 0;">
            <span class="status-indicator status-online"></span>
            H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông
          </p>
          
          <div style="text-align: center; color: rgba(255,255,255,0.8);">
            <div style="margin: 1vh 0;">
              <strong>T·ªïng s·ªë ƒë√£ g·ªçi h√¥m nay:</strong> <span id="todayTotal">-</span>
            </div>
            <div style="margin: 1vh 0;">
              <strong>S·ªë ƒëang ch·ªù:</strong> <span id="waitingTotal">-</span>
            </div>
            <div style="margin: 1vh 0;">
              <strong>ƒê√°nh gi√° h√¥m nay:</strong> <span id="ratingsToday">-</span>
            </div>
          </div>
        </div>

        <button onclick="refreshStats()" style="background: rgba(255,255,255,0.2); color: white;">
          üîÑ C·∫≠p nh·∫≠t th·ªëng k√™
        </button>
      </div>

      <!-- B√°o c√°o v√† c√¥ng c·ª• -->
      <div class="card reports-section">
        <h2>üìã B√°o c√°o v√† C√¥ng c·ª•</h2>
        
        <div class="reports-grid">
          <a href="export-professional.html" target="_blank" class="report-btn green">
            üìä Xu·∫•t b√°o c√°o chuy√™n nghi·ªáp
          </a>
          <a href="ratings-report.html" target="_blank" class="report-btn">
            üìà B√°o c√°o ƒë√°nh gi√°
          </a>
          <a href="ratings-detail.html" target="_blank" class="report-btn">
            ÔøΩ Chi ti·∫øt ƒë√°nh gi√°
          </a>
          <a href="customer-lookup.html" target="_blank" class="report-btn">
            üîç Tra c·ª©u m√£ KH
          </a>
          <a href="javascript:void(0)" onclick="openNumberDisplay()" class="report-btn purple">
            üì∫ M√†n h√¨nh s·ªë th·ª© t·ª±
          </a>
          <a href="javascript:void(0)" onclick="openAllCountersDisplay()" class="report-btn purple">
            üñ•Ô∏è M√†n h√¨nh t·ªïng h·ª£p
          </a>
          <a href="home.html" target="_blank" class="report-btn">
            üè† Trang l·∫•y s·ªë
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentCustomerCode = '';

    // Generate customer code from date and number
    function generateCustomerCode(number) {
      const now = new Date();
      const day = String(now.getDate()).padStart(2, '0');
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const year = String(now.getFullYear()).slice(-2);
      return `${day}${month}${year}-${number}`;
    }

    // Call next customer
    async function callNext() {
      const service = document.getElementById('service').value;
      const password = document.getElementById('adminPassword').value;
      
      if (password !== "admin123") {
        alert("‚ùå Sai m·∫≠t kh·∫©u qu·∫£n tr·ªã");
        return;
      }

      try {
        const response = await fetch('/call-next', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ service })
        });

        if (response.ok) {
          const data = await response.json();
          currentCustomerCode = generateCustomerCode(data.number);
          
          document.getElementById('numberCalled').textContent = `ƒê√£ g·ªçi s·ªë: ${data.number}`;
          document.getElementById('customerCodeDisplay').textContent = currentCustomerCode;
          document.getElementById('callResult').classList.add('show');
          
          // Auto refresh stats
          refreshStats();
        } else {
          alert("‚ùå Kh√¥ng c√≤n kh√°ch h√†ng trong h√†ng ƒë·ª£i");
          document.getElementById('callResult').classList.remove('show');
        }
      } catch (error) {
        console.error('Call next error:', error);
        alert("‚ùå L·ªói k·∫øt n·ªëi server");
      }
    }

    // Recall last customer
    async function recallLast() {
      const service = document.getElementById('service').value;
      const password = document.getElementById('adminPassword').value;
      
      if (password !== "admin123") {
        alert("‚ùå Sai m·∫≠t kh·∫©u qu·∫£n tr·ªã");
        return;
      }

      try {
        const response = await fetch('/recall-last', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ service })
        });

        if (response.ok) {
          const data = await response.json();
          currentCustomerCode = generateCustomerCode(data.number);
          
          document.getElementById('numberCalled').textContent = `ƒê√£ g·ªçi l·∫°i s·ªë: ${data.number}`;
          document.getElementById('customerCodeDisplay').textContent = currentCustomerCode;
          document.getElementById('callResult').classList.add('show');
        } else {
          const error = await response.json();
          alert(`‚ùå ${error.error || "Kh√¥ng th·ªÉ g·ªçi l·∫°i"}`);
        }
      } catch (error) {
        console.error('Recall error:', error);
        alert("‚ùå L·ªói k·∫øt n·ªëi server");
      }
    }

    // Copy customer code
    function copyCustomerCode() {
      if (!currentCustomerCode) {
        alert("‚ùå Ch∆∞a c√≥ m√£ kh√°ch h√†ng");
        return;
      }

      navigator.clipboard.writeText(currentCustomerCode).then(() => {
        alert(`‚úÖ ƒê√£ copy m√£ kh√°ch h√†ng: ${currentCustomerCode}`);
      }).catch(() => {
        // Fallback
        const textArea = document.createElement('textarea');
        textArea.value = currentCustomerCode;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert(`‚úÖ ƒê√£ copy m√£ kh√°ch h√†ng: ${currentCustomerCode}`);
      });
    }

    // Open rating form with customer code
    function openRatingForm() {
      if (!currentCustomerCode) {
        alert("‚ùå Ch∆∞a c√≥ m√£ kh√°ch h√†ng");
        return;
      }
      
      const url = `staff-rating.html?customerCode=${encodeURIComponent(currentCustomerCode)}`;
      window.open(url, 'ratingForm', 'width=800,height=900,scrollbars=yes,resizable=yes');
    }

    // Open customer lookup
    function openCustomerLookup() {
      window.open('customer-lookup.html', 'customerLookup', 'width=1200,height=800,scrollbars=yes,resizable=yes');
    }

    // Open display windows
    function openNumberDisplay() {
      window.open('number-display.html', 'numberDisplay', 'width=1200,height=900,scrollbars=yes,resizable=yes');
    }

    function openAllCountersDisplay() {
      window.open('all-counters-display.html', 'allCountersDisplay', 'width=1600,height=1000,scrollbars=yes,resizable=yes');
    }

    // Refresh system statistics
    async function refreshStats() {
      try {
        // Get today's stats
        const statsResponse = await fetch('/stats');
        if (statsResponse.ok) {
          const stats = await statsResponse.json();
          
          // Count today's calls
          const today = new Date().toISOString().split('T')[0];
          const todayCallsCount = Object.values(stats.history)
            .filter(calls => calls.some(call => call.time.startsWith(today)))
            .reduce((total, calls) => total + calls.filter(call => call.time.startsWith(today)).length, 0);
          
          const waitingCount = Object.values(stats.queue).reduce((total, queue) => total + queue.length, 0);
          
          document.getElementById('todayTotal').textContent = todayCallsCount;
          document.getElementById('waitingTotal').textContent = waitingCount;
        }

        // Get ratings count
        const ratingsResponse = await fetch('/ratings-report');
        if (ratingsResponse.ok) {
          const ratingsData = await ratingsResponse.json();
          console.log('üìä Ratings data:', ratingsData); // Debug log
          
          const today = new Date().toISOString().split('T')[0];
          let todayRatings = 0;
          
          if (ratingsData.ratings && Array.isArray(ratingsData.ratings)) {
            todayRatings = ratingsData.ratings.filter(rating => {
              const ratingDate = rating.timestamp.split('T')[0];
              return ratingDate === today;
            }).length;
          }
          
          document.getElementById('ratingsToday').textContent = todayRatings;
          
          // Also update total ratings display
          if (ratingsData.totalRatings !== undefined) {
            // You can add a total ratings display if needed
            console.log(`üìä Total ratings: ${ratingsData.totalRatings}, Today: ${todayRatings}`);
          }
        }
      } catch (error) {
        console.error('‚ùå Stats refresh error:', error);
        // Set error values
        document.getElementById('todayTotal').textContent = 'L·ªói';
        document.getElementById('waitingTotal').textContent = 'L·ªói';
        document.getElementById('ratingsToday').textContent = 'L·ªói';
      }
    }

    // Auto refresh stats every 30 seconds
    setInterval(refreshStats, 30000);

    // Initial stats load
    refreshStats();
  </script>
</body>
</html>
